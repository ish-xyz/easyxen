#!/bin/bash
#
## Basic function of module unirocket
## it provide a set of functions used by 
## the other cmd of the module

function initialize_vars() {
	##Initialize Vars
	## global and non-global

	export STEP=0;
	export ROOT_PATH="/mnt/easyxen"
	export LOG_FILE="${ROOT_PATH}/log/debug_log";
	export IMAGES_REPO="${ROOT_PATH}/images";
	export DEBUG=0
	#export LOG_TYPE="slack"
}

function vm_exist() {
	##Simple check if the vm passed in 
	##the parameters exist or not
	
	get_vm=$(xe vm-list name-label=$1);
	if [ -n "${get_vm}" ]; then
		return 0
	else
        return 1
    fi
}

function vm_name_available() {
	##Simple check if the vm name passed in 
	##the parameters is available or not

    get_vm_name=$(xe vm-list name-label=$1);
    if [[ -n "${get_vm_name}" ]]; then
        return 1
    else
        return 0
    fi
}

function get_vm_uuid() {
	## Function to return the VM UUID by name
	## if the first argument is not specified exit

	if [[ -z "$1" ]]; then
		log 'exit' 'Error no vm_name passed'
	else
		vm_uuid_count=$(xe vm-list name-label="$1" params=uuid | awk {'print $5'} | sed '/^\s*$/d' | wc -l);
		if [[ ${vm_uuid_count} != 1 ]]; then
			return 1
		else
			vm_uuid=$(xe vm-list name-label="$1" params=uuid | awk {'print $5'} | sed '/^\s*$/d')
			echo "${vm_uuid}"
		fi
	fi
}

function log() {
	## Log function
	## Stdout and append to the ${LOG_FILE} defined in the
	## initialize_vars function.

	if [[ ${DEBUG} == 0 ]]; then
		if [[ "$1" == "msg" ]]; then
			echo "$2" >> "${LOG_FILE}"
		elif [[ "$1" == "exit" ]]; then
			echo "$2 | rc: $3" >> "${LOG_FILE}"
			exit $3
		fi
	else
		if [[ "$1" == "msg" ]]; then
			echo "$2" | tee -a "${LOG_FILE}"
		elif [[ "$1" == "exit" ]]; then
			echo "$2 | rc: $3" | tee -a "${LOG_FILE}"
			exit $3
		fi
	fi
}

function check_exit() {
	## Usage: After a command run --> 
	## check_exit "$?" "{{ success_message }}" "{{ error_message }}" 
	## "fail/warn" "${LINENO}"

	if [[ "$1" == "0" ]]; then
		log 'msg' "OK: $2"
	elif [[ "$4" == "warn" ]]; then
		log 'msg' "WARN: $3"
	elif [[ "$4" == "fail" ]]; then
		log 'exit' "FAIL: $3 exit_code: $5"
	else
		log 'exit' 'You are not using the check_exit function properly.' "${LINENO}"
	fi
}



function check_params() {
	## Function to check parameters 
	## passed as arguments

    for param in ${@}; do
        var_to_check=$(eval echo \$${param});
        if [[ -z "${var_to_check}" ]]; then
                log 'exit' "Param or variables ${param} not specified!" "${LINENO}"
        fi
    done

    if [[ -n "${image}" ]]; then

	    if [[ -f "${IMAGES_REPO}/${image}" ]]; then
	        log 'msg'  'OK: IMAGE exist.';
	    else
	        log 'exit'  'FAIL: IMAGE does not exist.' "${LINENO}";
	    fi
	fi
}

function check_state() {
	##Check if the state defined exist
	## if not exit

	case "${state}" in
		'absent')
			log "msg" "Operation selected is ${state}"
		;;
		'present')
			log "msg" "Operation selected is ${state}"
		;;
		'halt')
			log "msg" "Operation selected is ${state}"
		;;
		'run')
			log "msg" "Operation selected is ${state}"
		;;
		'reconfigure')
			log "msg" "Operation selected is ${state}"
		;;
		*)
			log "exit" "No operations match." "${LINENO}"
		;;
	esac
}


function present() {
	##Create VM and setup as the desidered state. (Non-Idempotent)
	##

	#Initialize variables
	retry_temptative=0
	count=0
	vgflag="vgroot"
    mount_point="/mnt/$vm_name";
    mount_dev="/dev/${vgflag}/root";
    tmp_pass="easyxen${RANDOM}${RANDOM}${RANDOM}";
   
    function ansible_usage() {
    	#Usage function, help
		cat <<____EOF____
- name: "Xen provisioning new machine"
  easyxen:
    state: present 									* REQUIRED
    vm_name: worker2 								* REQUIRED
    cpu: 1 											* REQUIRED
    ram: 512 										* REQUIRED
    mac_address: 00:0c:29:6f:5d:c3  				(optional) - default = automatically generated
    image: base.xva									* REQUIRED
    ip_address: 192.168.1.170 						* REQUIRED
    gateway: 192.168.1.1 							* REQUIRED
    netmask: 255.255.255.0 							(optional) - default = 255.255.255.0
    broadcast: 192.168.1.255 						(optional) - default = {{ ip_address }}.255
    dns1: 192.168.1.126 							(optional) - default = 8.8.8.8
    dns2: 192.168.1.127 							(optional) - default = 8.8.4.4
    disk_to_mount: 0 								* REQUIRED
    distro: centos					 				* REQUIRED
    network_file: '{network_path}/ifcfg-eth0' 		(optional) - default defined by OS distro.
    pub_key: 	'id_rsa.pub (raw key)'				* REQUIRED
    os_user: 										(optional) - default = easyxen
    *playbook: 										(optional) - default = none *Playbook to run on the instance after the boot.
    *userdata:										(optional) - default = none	
      - role: web
      - env: dev
      - custom: value

____EOF____
	}
	
	function cleanup() {
		if [[ $1 != 0 ]]; then
			case "$2" in

				'plug')
					xe vbd-destroy uuid="${new_vbd_uuid}";
					;;

				'plug')
					xe vbd-destroy uuid="${new_vbd_uuid}";
					;;

				'kpartx')
					xe vbd-unplug uuid="${new_vbd_uuid}";
					xe vbd-destroy uuid="${new_vbd_uuid}";
					;;

				'vgchange')
					/sbin/kpartx -fd "/dev/${device}" > /dev/null 2>&1
					xe vbd-unplug uuid="${new_vbd_uuid}";
					xe vbd-destroy uuid="${new_vbd_uuid}";
					;;

				'mount')
					vgchange -an "${vgflag}" --config global{metadata_read_only=0} > /dev/null 2>&1
					rmdir "${mount_point}/"
					/sbin/kpartx -fd "/dev/${device}" > /dev/null 2>&1
					xe vbd-unplug uuid="${new_vbd_uuid}";
					xe vbd-destroy uuid="${new_vbd_uuid}";
					;;

				*)
					log "msg" "Cleanup called, but nothing to do."
					;;
			esac
		fi
	}

	function configure_network_centos() {
echo -ne \
"DEVICE=eth0\n\
BOOTPROTO=none\n\
ONBOOT=yes\n\
USERCTL=no\n\
IPV6INIT=no\n\
PEERDNS=no\n\
DNS1=${dns1}\n\
DNS2=${dns2}\n\
TYPE=Ethernet\n\
NETMASK=${netmask}\n\
IPADDR=${ip_address}\n\
GATEWAY=${gateway}\n\
HWADDR=${mac_address}\n\
ARP=yes" > "${mount_point}${network_file}";

		echo "$vm_name" > "${mount_point}/etc/hostname"
		echo "127.0.0.1 $vm_name" >> "${mount_point}/etc/hosts"

	}


	function configure_network_ubuntu() {
		log 'msg' "No configuration found for distro: ${distro}"
	}


	function configure_network_redhat() {
		echo -ne \
"DEVICE=eth0\n\
BOOTPROTO=none\n\
ONBOOT=yes\n\
USERCTL=no\n\
IPV6INIT=no\n\
PEERDNS=no\n\
DNS1=${dns1}\n\
DNS2=${dns2}\n\
TYPE=Ethernet\n\
NETMASK=${netmask}\n\
IPADDR=${ip_address}\n\
GATEWAY=${gateway}\n\
HWADDR=${mac_address}\n\
ARP=yes" > "${mount_point}${network_file}";

		echo "$vm_name" > "${mount_point}/etc/hostname"
		echo "127.0.0.1 $vm_name" >> "${mount_point}/etc/hosts"
	}


	function configure_network_debian() {
		log 'msg' "No configuration found for distro: ${distro}"
	}

##STARTING WORKFLOW###
#####################################################


	################################
	####== START FIRST CHECKS ==####
	################################

	#Check parameters needed for this function.
	#(the function check_params is in lib/basic.sh)
	check_params \
		'vm_name' \
		'cpu' \
		'ram' \
		'gateway' \
		'ip_address' \
		'disk_to_mount' \
		'distro' \
		'pub_key' \
		'os_user' \
		'image'


	#Setting up all optional variables with the default value.

	#DNS default are google dns 8.8.8.8/8.8.4.4
	[[ -z "${dns1}" ]] && dns1='8.8.8.8'
	[[ -z "${dns2}" ]] && dns1='8.8.4.4'

	#Netmask default is /24
	[[ -z "${netmask}" ]] && netmask='255.255.255.0'

	#Network file to the network configuration on the guest.
	[[ -z "${network_file}" ]] && \
		case "${distro}" in
			'centos')
				network_file='/etc/sysconfig/network-scripts/ifcfg-eth0'
			;;

			'redhat')
				network_file='/etc/sysconfig/network-scripts/ifcfg-eth0'
			;;

			'ubuntu')
				network_file='/etc/network/interfaces'
			;;

			'debian')
				network_file='/etc/network/interfaces'
			;;

			*)
				log 'exit' 'No default configuration found for the current VM' "${LINENO}"
			;;
		esac
		

	#After the machine is configured (halt or run, default=run)
	[[ -z "${after_configuration}" ]] && \
		after_configuration="run"
	
	#Default Broadcast addr is .255
	[[ -z "${broadcast}" ]] && broadcast=$(echo ${ip_address} | 
		awk -F '.' {'print $1"."$2"."$3".255"'})

	#Default mac_address is {RANDOM}
	[[ -z "${mac_address}" ]] && \
		mac_address=$( echo $(uuidgen | sed 's/\-//g' | 
			cut -c 1-12 | fold -w 2) | sed 's# #:#g');

	#Check if the vm_name is available for this hypervisor.
	vm_name_available "${vm_name}"
	check_exit \
		"$?" \
		"vm_name available" \
		"vm_name not available" \
		"fail" \
		"${LINENO}"

	####################################
	####== IMPORT VM AND HW SETUP ==####
	####################################

	#Import vm and get the uuid
	vm_uuid=$(xe vm-import filename="${IMAGES_REPO}/${image}");
	check_exit \
		"$?" \
		"vm import done." \
		"vm import fail." \
		"fail" \
		"${LINENO}"

	#Rename VM as the desidered state
	xe vm-param-set uuid="${vm_uuid}" name-label="${vm_name}";
	check_exit \
		"$?" \
		"vm rename done." \
		"vm rename failed." \
		"fail" \
		"${LINENO}"

	#Setup vCPU value for the new VM.
	xe vm-param-set uuid="${vm_uuid}" \
    VCPUs-at-startup="1" VCPUs-max="${cpu}"

    xe vm-param-set uuid="${vm_uuid}" \
    VCPUs-at-startup="${cpu}" VCPUs-max="${cpu}";
	check_exit \
		"$?" \
		"cpu setup done." \
		"cpu setup failed, not mandatory." \
		"warn" \
		"${LINENO}"

	#Setup RAM value for the new VM.
	xe vm-memory-limits-set uuid="${vm_uuid}" \
    static-min="${ram}MiB" dynamic-min="${ram}MiB" \
    static-max="${ram}MiB" dynamic-max="${ram}MiB"
	check_exit \
		"$?" \
		"setup static memory." \
		"setup static memory, value: ${ram}" \
		"fail" \
		"${LINENO}"

	#Remove all old VIF
	old_vifs=$(xe vif-list vm-uuid="${vm_uuid}" params=uuid  | 
		awk {'print $5'} | sed '/^\s*$/d');

	for vif_uuid in ${old_vifs[@]}; do
		xe vif-destroy uuid="${vif_uuid}"
		check_exit \
			"$?" \
			"Remove old virtual interfaces..."
			"Remove old virtual interface ${vif_uuid}"
			"fail"
			"${LINENO}"
	done

	#Get network uuid
	network_uuid=$(xe network-list bridge=xenbr0 params=uuid |
		awk {'print $5'} | grep .);
	check_exit \
		"$?" \
		"Get UUID of the xenbr0 interface." \
		"Get UUID of the xenbr0 interface." \
		"fail" \
		"${LINENO}"
    
    VIF=$(xe vif-create vm-uuid=${vm_uuid} \
        mac=${mac_address} \
        device=1 \
        network-uuid=${network_uuid});
	check_exit \
		"$?" \
		"Create new network virtual interface" \
		"Create new network virtual interface with mac_address ${mac_address}" \
		"fail" \
		"${LINENO}"


	###############################
	####== MOUNT GUEST DISKS ==####
	###############################

	#Get the dom0 UUID
    dom0_uuid=$(xe vm-list is-control-domain=true params=uuid | 
        awk {'print $5'});
	check_exit \
		"$?" \
		"Get dom0 uuid." \
		"Get dom0 uuid. " \
		"fail" \
		"${LINENO}"

	#Get correct vdi_uuid based on device position --> 0
	vbd_uuids=$(xe vbd-list vm-uuid="${vm_uuid}" params=uuid |
	                awk {'print $5'} | sed '/^\s*$/d');

	for vbd_uuid in ${vbd_uuids[@]}; do
	## For each vbd get the VDI device position
	        device_position=$(xe vbd-param-list uuid=${vbd_uuid} |
	        	grep userdevice | awk {'print $4'});

	        ## If the position is 0, get the 
	        ## vdi uuid and save it.
	        if [[ ${device_position} == ${disk_to_mount} ]]; then
	                vdi_uuid=$(xe vbd-list uuid=${vbd_uuid} params=vdi-uuid |
	                        awk {'print $5'} | sed '/^\s*$/d')
					check_exit \
						"$?" \
						"Get vm vdi_uuid." \
						"Get vm vdi_uuid." \
						"fail" \
						"${LINENO}"
	        fi
	done

	#Create new vbd on the dom0 for the guest vdi
    new_vbd_uuid=$(xe vbd-create vm-uuid=${dom0_uuid} \
        vdi-uuid=${vdi_uuid} device=autodetect);
	check_exit \
		"$?" \
		"Create new vbd on dom0 with the guest vdi." \
		"new_vbd_uuid: vdi --> ${vdi_uuid}, dom0 --> ${dom0_uuid}}" \
		"fail" \
		"${LINENO}"

    xe vbd-plug uuid="${new_vbd_uuid}"
    rc=$?
    cleanup "${rc}" 'plug'
    check_exit \
		"${rc}" \
		"Plug new vbd." \
		"Plug new vbd. new_vbd_uuid --> ${new_vbd_uuid}" \
		"fail" \
		"${LINENO}"

	device=$(xe vbd-list uuid="${new_vbd_uuid}" params=device |
		awk {'print $5'} | sed '/^\s*$/d');
    rc=$?
    cleanup "${rc}" 'kpartx'
	check_exit \
		"$?" \
		"Get disk device to setup." \
		"Get disk device to setup." \
		"fail" \
		"${LINENO}"

	#Wait until the vgroot flag is the only one in the system.
	vg_exist=$(vgs | awk {'print $1'} | grep -w "${vgflag}")
    while [[ -n "${vg_exist}" ]]; do
        log 'msg' 'Waiting to the VG'
        sleep 3
        retry_temptative=$(( ${retry_temptative} + 1));

        if [[ ${retry_temptative} == 10 ]]; then
        	cleanup "${rc}" 'kpartx'
	    	check_exit \
				"1" "null" \
				"vgroot flag not available. \
				Too much build or locked situation." \
				"fail" \
				"${LINENO}"
        fi
    done

    #Partx new device
    kpartx_device=$(/sbin/kpartx -fva /dev/${device});
    rc=$?
    cleanup "${rc}" 'kpartx'
    check_exit \
		"${rc}" \
		"kpartx disk device" \
		"kpartx device ${device}" \
		"fail" \
		"${LINENO}"

	#Activate the volume group of the guest disk
	vgchage_device=$(vgchange -ay "${vgflag}" \
		--config global{metadata_read_only=0})
	rc=$?
	cleanup "${rc}" 'vgchange'
	check_exit \
		"${rc}" \
		"vgchage: activate guest volume group" \
		"vgchage: activate guest volume group" \
		"fail" \
		"${LINENO}"

	#Mount Guest Logical Volume on mnt/vm_name/
	mkdir "${mount_point}/";
	mount "${mount_dev}" "${mount_point}/"
	rc=$?
	cleanup "${rc}" 'mount'
	check_exit \
		"${rc}" \
		"mount ${mount_dev} ${mount_point}/" \
		"mount ${mount_dev} ${mount_point}/" \
		"fail" \
		"${LINENO}"

	###########################################
	####== GUEST BASIC OS CONFIGURATIONS ==####
	###########################################

	#Guest disk is now mounted:
	#Starting network configuration
	case "${distro}" in
		'centos')
			configure_network_centos
			;;
		'redhat')
			configure_network_redhat
			;;
		'debian')
			configure_network_debian
			;;
		'ubuntu')
			configure_network_ubuntu
			;;
		*)
			log 'exit' "The selected distro ${distro} doesnt have any network configuration" "{LINENO}" 
			;;
	esac

	#Setup Shadow file for TEMP root login
	tmp_pass_shadow=$(python -c "import crypt; print crypt.crypt(\"${tmp_pass}\")")
	shadow_string="root:${tmp_pass_shadow}::0:99999:7:::"

	#Setup shadow with the tmp password for root
	##
	chmod 644 "${mount_point}/etc/shadow" && \
	tac "${mount_point}/etc/shadow" | grep . --color=none | \
		head -n -1 > "${mount_point}/etc/shadow.new" && \
	echo "${shadow_string}" >> "${mount_point}/etc/shadow.new" && \
	tac "${mount_point}/etc/shadow.new" | grep . --color=none > "${mount_point}/etc/shadow" && \
	chmod 600 "${mount_point}/etc/shadow"
	rc=$?
	cleanup "${rc}" 'mount'
	check_exit \
		"${rc}" \
		"Setup /etc/shadow." \
		"Setup /etc/shadow." \
		"fail" \
		"${LINENO}"

	#Disable Selinux
	##
	sed -i 's#enforcing#disabled#g' "${mount_point}/etc/selinux/config"
	rc=$?
	cleanup "${rc}" 'mount'
	check_exit \
		"${rc}" \
		"Disable selinux." \
		"Disable selinux -> ${mount_point}/etc/selinux/config" \
		"fail" \
		"${LINENO}"

	###############################
	####== UMOUNT GUEST DISK ==####
	###############################

	#Starting: umount guest disk and remove dom0 link
	umount "${mount_point}/" &&  rmdir "${mount_point}/"
	check_exit \
		"$?" \
		"umount & rm directory -> ${mount_point}/" \
		"umount & rm directory -> ${mount_point}/" \
		"fail" \
		"${LINENO}"

	#Deactivate Logical Volume and Volume group
    vgchange -an "${vgflag}" --config global{metadata_read_only=0} > /dev/null 2>&1
    check_exit \
		"$?" \
		"vgchange deactivate volumgroup" \
		"vgchange deactivate volumgroup" \
		"fail" \
		"${LINENO}"

	#Kpartx -d (remove partitioning on device)
    /sbin/kpartx -dv "/dev/${device}" > /dev/null 2>&1
    check_exit \
		"$?" \
		"Remove partitioning on device, ${device}" \
		"Remove partitioning on device, ${device}" \
		"fail" \
		"${LINENO}"
    
    xe vbd-unplug uuid="${new_vbd_uuid}" && \
    xe vbd-destroy uuid="${new_vbd_uuid}"
	check_exit \
		"$?" \
		"unnplug and destroy the new_vbd ${new_vbd_uuid}" \
		"unnplug and destroy the new_vbd ${new_vbd_uuid}" \
		"fail" \
		"${LINENO}"
	
	#Setup VM description
	xe vm-param-set \
	name-description="$ip_address#$mac_address" \
	uuid="${vm_uuid}"
    check_exit \
		"$?" \
		"Setup new name ${vm_uuid}" \
		"unnplug and destroy the new_vbd ${new_vbd_uuid}" \
		"fail" \
		"${LINENO}"

	##########################################
	####== LAST OPERATIONS AND START VM ==####
	##########################################

	#Rename disks with vm_name and disk position
    for vdi_uuid in $(xe vbd-list vm-uuid=${vm_uuid} | grep -v "not in database" | grep "vdi-uuid ( RO):" | awk {'print $4'}); do
        xe vdi-param-set name-label="${vm_name}#${count}" uuid="${vdi_uuid}";
        count=$(( ${count} + 1 ));
    done
    
    #Start and halt VM to attach the os customization
    xe vm-start uuid="${vm_uuid}" > /dev/null 2>&1
    check_exit \
		"$?" \
		"Start VM to take the OS configuration." \
		"Start VM to take the OS configuration." \
		"fail" \
		"${LINENO}"

	log 'msg' "temporary password => ${tmp_pass}"

	sshpass -p ${tmp_pass} ssh -l root "${ip_address}" \
	"adduser --password xyz --shell /bin/bash -m -c 'Easyxen Automation' ${os_user} && \
		mkdir /home/${os_user}/.ssh && touch /home/${os_user}/.ssh/authorized_keys && \
		echo ${pub_key} > /home/${os_user}/.ssh/authorized_keys && \
		chmod 600 /home/${os_user}/.ssh/authorized_keys && \
		sed -i 's/#PermitRootLogin yes/#PermitRootLogin no/g' /etc/ssh/sshd_config && \
		sed -i 's/PasswordAuthentication yes/PasswordAuthentication no/g' /etc/ssh/sshd_config && \
		echo \"${os_user}  ALL=NOPASSWD: ALL\" >> '/etc/sudoers' && \
		chown -R ${os_user}:${os_user} /home/${os_user}/.ssh/"
    check_exit \
		"$?" \
		"Configure OS guest user and security basics." \
		"Configure OS guest user and security basics." \
		"fail" \
		"${LINENO}"

	##Success output to integrate with Ansible
	changed=true
    msg="ip address: ${ip_address}"
    printf '{"changed": %s, "msg": "%s"}' "${changed}" "${msg}"
}

function absent() {
	##Remove virtual machines (Idempotent)
	##

	function ansible_usage() {
    	#Usage function, help
		cat <<____EOF____
- name: "Xen Remoev VM"
  easyxen:
    state: absent 			* REQUIRED
    vm_name: worker2 		* REQUIRED

____EOF____
	}

##STARTING WORKFLOW###
#####################################################

	#Check parameters needed for this function.
	#(the function check_params is in lib/basic.sh)
	check_params 'vm_name'

	#Check if the vm is prensent
	#If NOT is already in the desidered state.
	vm_exist "${vm_name}"
	if [[ $? == 0 ]]; then
		vm_uuid=$(get_vm_uuid "${vm_name}");

		vm_power_state=$(xe vm-list params=power-state uuid=${vm_uuid} | awk {'print $5'} | sed '/^\s*$/d');
		if [[ "${vm_power_state}" == 'halted' ]]; then
			remove_vm=$(xe vm-destroy uuid="${vm_uuid}");
			check_exit \
				"$?" \
				"Removing virtual machine ${vm_name}" \
				"Removing vm ${vm_name} ${vm_uuid}" \
				"fail" \
				"${LINENO}"
		else
			remove_vm=$(xe vm-shutdown uuid="${vm_uuid}" force=true && \
			xe vm-destroy uuid="${vm_uuid}");
			check_exit \
				"$?" \
				"Removing virtual machine ${vm_name}" \
				"Removing vm ${vm_name} ${vm_uuid}" \
				"fail" \
				"${LINENO}"
		fi

		#Log and Ansible(JSON) output
		changed=true
		msg="VM ${vm_name} removed."
		printf '{"changed": %s, "msg": "%s"}' "${changed}" "${msg}"
	else
		#Log and Ansible(JSON) output
		log 'msg' 'vm already removed.'
		changed=false
		msg="VM already removed."
		printf '{"changed": %s, "msg": "%s"}' "${changed}" "${msg}"
	fi
}

function halt() {
	##Halt virtual machines (Idempotent)
	##

	function ansible_usage() {
    	#Usage function, help
		cat <<____EOF____
- name: "Xen Remoev VM"
  easyxen:
    state: halt  			* REQUIRED
    vm_name: worker2 		* REQUIRED

____EOF____
	}

##STARTING WORKFLOW###
#####################################################

	#Check parameters needed for this function.
	#(the function check_params is in lib/basic.sh)
	check_params 'vm_name'

	#Check if the vm is prensent
	#If NOT it will be fail.
	vm_exist "${vm_name}"
	if [[ $? == 0 ]]; then

		#Check if the VM is already shutted down.
		vm_uuid=$(get_vm_uuid "${vm_name}");
		vm_power_state=$(xe vm-list params=power-state uuid=${vm_uuid} | awk {'print $5'} | sed '/^\s*$/d');
		if [[ "${vm_power_state}" == 'halted' ]]; then

			#Log and Ansible(JSON) output (Desidered State no change)
			log 'msg' "VM ${vm_name} already halted."
			changed=false
			msg="VM ${vm_name} already halted."
			printf '{"changed": %s, "msg": "%s"}' "${changed}" "${msg}"

		else
			#Shutting down the VM using xen-cli
			halt_vm=$(xe vm-shutdown uuid="${vm_uuid}");
			check_exit \
				"$?" \
				"Shutting down virtual machine ${vm_name}" \
				"Shutting down ${vm_name} ${vm_uuid}" \
				"fail" \
				"${LINENO}"

			#Log and Ansible(JSON) output (Desidered State change)
			log 'msg' "VM ${vm_name} halted."
			changed=true
			msg="VM ${vm_name} halted."
			printf '{"changed": %s, "msg": "%s"}' "${changed}" "${msg}"
		fi
	else
		#ERROR if the VM does not exist.
		log 'exit' 'The desidered vm does not exist.'
	fi
}

function run() {
	##Start/Run virtual machines (Idempotent)
	##

	function ansible_usage() {
    	#Usage function, help
		cat <<____EOF____
- name: "Xen Remoev VM"
  easyxen:
    state: halt  			* REQUIRED
    vm_name: worker2 		* REQUIRED

____EOF____
	}

##STARTING WORKFLOW###
#####################################################

	#Check parameters needed for this function.
	#(the function check_params is in lib/basic.sh)
	check_params 'vm_name'

	#Check if the vm is prensent
	#If NOT it will be fail.
	vm_exist "${vm_name}"
	if [[ $? == 0 ]]; then

		#Check if the VM is already running.
		vm_uuid=$(get_vm_uuid "${vm_name}");
		vm_power_state=$(xe vm-list params=power-state uuid=${vm_uuid} | awk {'print $5'} | sed '/^\s*$/d');
		if [[ "${vm_power_state}" == 'running' ]]; then

			#Log and Ansible(JSON) output (Desidered State no change)
			log 'msg' "VM ${vm_name} is already running."
			changed=false
			msg="The VM ${vm_name} is already running."
			printf '{"changed": %s, "msg": "%s"}' "${changed}" "${msg}"

		else
			#Starting VM using xen-cli
			halt_vm=$(xe vm-start uuid="${vm_uuid}");
			check_exit \
				"$?" \
				"Startng down virtual machine ${vm_name}" \
				"Startng down ${vm_name} ${vm_uuid}" \
				"fail" \
				"${LINENO}"

			#Log and Ansible(JSON) output (Desidered State change)
			log 'msg' "The VM ${vm_name} is now running."
			changed=true
			msg="VM ${vm_name} halted."
			printf '{"changed": %s, "msg": "%s"}' "${changed}" "${msg}"
		fi
	else
		#ERROR if the VM does not exist.
		log 'exit' 'The desidered vm does not exist.'
	fi
}

function reconfigure() {
	##Reconfigure virtual machines (Idempotent)
	##NOTE: The Shrink function will be not released in the first version of the module.

	#Initialize Variables
	TMPFILE001=$(echo "/tmp/${RANDOM}.easyxen");
	TMPFILE002=$(echo "/tmp/${RANDOM}.easyxen");
	TMPFILE003=$(echo "/tmp/${RANDOM}.easyxen");

	function ansible_usage() {
  #Usage function, help
    cat <<____EOF____
- name: "Reconfigure XEN vm."
  easyxen:
    state: reconfigure
    vm_name: {{ vm_name }}    *REQUIRED
    cpu: 1                    *REQUIRED
    ram: 1024                 *REQUIRED
    sr_name: 'Local storage'  *REQUIRED
    disk_0: 10GiB             *Optional (default value= 10GiB)
    disk_1: 200MiB            *Optional (default value= 10GiB)
    pub_key:                  *REQUIRED
____EOF____
  }

##STARTING WORKFLOW###
#####################################################

	##Check parameters needed for this function.
	##
	check_params \
		'vm_name' \
		'cpu' \
		'ram' \
		'sr_name' \
		'pub_key'
	
	#Get storagege Resource uuid
	sr_uuid=$(xe sr-list name-label="${sr_name}" params=uuid  | awk {'print $5'});
	check_exit \
		"$?" \
		"Get Storage Resource uuid" \
		"Get Storage Resource uuid -> ${sr_uuid}" \
		"fail" \
		"${LINENO}"
	
	##Get vm_uuid by name
	##
	vm_uuid=$(get_vm_uuid "${vm_name}");
	check_exit \
		"$?" \
		"Get vm uuid by name" \
		"Get vm uuid by name" \
		"fail" \
		"${LINENO}"	
	
	#Check Disks desidered state
	disks=$(printenv | grep disk_[0-8] | grep -v '^disk_3=');
	act_disks="${TMPFILE001}"
	des_disks="${TMPFILE002}"

	xe vm-disk-list uuid="${vm_uuid}"  | grep userdevice | 
		awk {'print $4'} | sort > "${act_disks}";
	check_exit \
		"$?" \
		"Get actual disks position." \
		"Get actual disks position." \
		"fail" \
		"${LINENO}"

	printenv | grep disk_[0-8] | grep -v '^disk_3=' | 
		awk -F 'disk_' {'print $2'} | 
		awk -F '=' {'print $1'} | sort > "${des_disks}"
	check_exit \
		"$?" \
		"Get desidered disks position." \
		"Get desidered disks position." \
		"fail" \
		"${LINENO}"	

	#Get disks to remove and add.
	disks_to_add=$(diff "${act_disks}" "${des_disks}" | grep -e '>' | awk {'print $2'});
	disks_to_rmv=$(diff "${act_disks}" "${des_disks}" | grep -e '<' | awk {'print $2'});
	
	#Check disks format values
	for x in $(cat ${des_disks}); do
		curvalue=$(eval echo \$disk_${x});
		
		if [[ "${curvalue}" =~ ^[0-9]*[G,M]iB$ ]]; then
			log 'msg' "OK: The disk_${x} => ${curvalue}, value is valid.";
		else
			log 'exit' "FAIL: The disk_${x} => ${curvalue}, value is not valid.";
		fi
	done


	#Check disks size changes & get disks to update later.
	for disk in ${disks}; do

		#Current Disk ID and Value
		cd_id=$(echo ${disk} | awk -F '=' {'print $1'});
		cur_dev=$(echo ${cd_id} | awk -F '_' {'print $2'});
		cd_value=$(echo ${disk} | awk -F '=' {'print $2'});
		cur_vbd=$(xe vm-disk-list uuid=${vm_uuid} | 
			grep "userdevice ( RW): ${cur_dev}" -B 2 | 
			grep 'uuid ( RO)' | 
			awk {'print $5'} | 
			head -n 1);
		if [[ -n "${cur_vbd}" ]]; then

			#Current VDI
			cur_vdi=$(xe vbd-list params=vdi-uuid uuid=${cur_vbd} | 
				awk {'print $5'});

			#Current virtual size
			cur_vs=$(xe vdi-list uuid="${cur_vdi}" params=virtual-size | 
				awk {'print $5'});

			if [[ "${cd_value}" =~ ^[0-9]*GiB$ ]]; then
				cur_ds=$(( $(echo ${cd_value} | 
					sed 's#GiB##g') * 1024 * 1024 * 1024 ));
			elif [[ "${cd_value}" =~ ^[0-9]*MiB$ ]]; then
				cur_ds=$(( $(echo ${cd_value} | 
					sed 's#MiB##g') * 1024 * 1024 ));
			fi

			#Check if the desidered size is higher then di current.
			if [[ "${cur_ds}" -gt "${cur_vs}" ]]; then
				disk_size_changes=true
				log 'msg' "MSG: Detected disk size changes on ${cd_id} to ${cur_ds}"
				echo "${cur_dev} ${cd_value}" >> "${TMPFILE003}";
			fi

		fi
	done

	#=Service messages
	if [[ -n "${disk_3}" ]]; then
		log 'msg' 'WARN: DISK POSITION 3 WILL BE IGNORED.'
	fi

	log 'msg' 'MSG: Shrink operation on disks will be ignored.'
	log 'msg' 'MSG: Disks over 8 as position will be ignored.'
	log 'msg' "MSG: Desidered ram -> ${ram}"
	log 'msg' "MSG: Desidered cpu -> ${cpu}"
	log 'msg' "MSG: Desidered disks -> $(printenv | 
		grep disk_[0-8] | 
		grep -v '^disk_3=' | wc -l)"

	log "msg" "MSG: The action 'reconfigure' may be turn off your VM for a moment."
	#= End Service messages

	##Get actual values CPU
	##
	actual_cpu=$(xe vm-param-get uuid=${vm_uuid} param-name=VCPUs-max);
	check_exit \
		"$?" \
		"Actual CPU value is: ${actual_cpu}" \
		"Get actual CPU -> ${actual_cpu}" \
		"fail" \
		"${LINENO}"

	##Get actual values RAM
	##
	actual_ram=$(( $(xe vm-list params=memory-static-max uuid=${vm_uuid} |
		awk {'print $5'} | sed '/^\s*$/d') / 1024 / 1024 ));
	check_exit \
		"$?" \
		"Actual RAM value is: ${actual_ram}" \
		"Get actual RAM value -> ${actual_ram}" \
		"fail" \
		"${LINENO}"
	
	
##_Perform Shutdown action only \
	##_if something is changed
	if [[ "${actual_ram}" != "${ram}" ]] || \
		[[ "${actual_cpu}" != "${cpu}" ]] || \
		[[ -n "${disks_to_rmv}" ]] || \
		[[ -n "${disks_to_add}" ]] || \
		[[ "${disk_size_changes}" == true ]]; then
			
			get_vm_current_status=$(xe vm-list uuid=${vm_uuid} \
				params=power-state  | awk {'print $5'});

			#Shutdown the VM if something is changed
			if [[ "${get_vm_current_status}" == "running" ]]; then

				xe vm-shutdown uuid="${vm_uuid}"
				check_exit \
					"$?" \
					"Shutdown VM, ready to be reconfigured." \
					"Shutting down VM." \
					"fail" \
					"${LINENO}"
			fi

			#Setup CPU as the desidered state
			if [[ ${actual_ram} != ${ram} ]]; then
				#Setup RAM value for the new VM.
				xe vm-memory-limits-set uuid="${vm_uuid}" \
				static-min="${ram}MiB" dynamic-min="${ram}MiB" \
				static-max="${ram}MiB" dynamic-max="${ram}MiB" > /dev/null 2>&1
				check_exit \
					"$?" \
					"setup static memory." \
					"setup static memory, value: ${ram}" \
					"fail" \
					"${LINENO}"
			fi

			#Setup CPU as the desidered state
			if [[ ${actual_cpu} != ${cpu} ]]; then
				xe vm-param-set uuid="${vm_uuid}" \
				VCPUs-at-startup=1 VCPUs-max="${cpu}" > /dev/null 2>&1
			    check_exit \
					"$?" \
					"Pair static vCPU." \
					"Pair static vCPU: ${cpu}" \
					"fail" \
					"${LINENO}"

			    VCPUs-at-startup="${cpu}" VCPUs-max="${cpu}" > /dev/null 2>&1
				check_exit \
					"$?" \
					"setup static vCPU." \
					"setup static vCPU: ${cpu}" \
					"fail" \
					"${LINENO}"
			fi

			#Start VM
			##
			 get_vm_current_status=$(xe vm-list uuid=${vm_uuid} \
			 	params=power-state  | awk {'print $5'});
			 if [[ ${get_vm_current_status} == 'halted' ]]; then
			 	echo xe vm-start uuid="${vm_uuid}" > /dev/null 2>&1
			 	check_exit \
			 			"$?" \
			 			"Start VM ${vm_uuid}" \
			 			"Start VM ${vm_uuid}" \
						"fail" \
			 			"${LINENO}"
			fi

			#ADD disks
			log 'msg' 'MSG: Start analyzing the disks to add...'
			for dpos in ${disks_to_add}; do
				cur_size=$(eval echo \$disk_${dpos});
				xe vm-disk-add uuid="${vm_uuid}" device="${dpos}" disk-size="${cur_size}" sr-uuid="${sr_uuid}"
				check_exit \
			 		"$?" \
			 		"Add disk ${dpos} with size => ${cur_size} on sr ${sr_uuid}." \
			 		"Add disk ${dpos} with size => ${cur_size} on sr ${sr_uuid}." \
					"fail" \
			 		"${LINENO}"
			done

			#REMOVE disks
			log 'msg' 'MSG: Start analyzing the disks to remove...'
			for dpos in ${disks_to_rmv}; do
				xe vm-disk-remove device="${dpos}" uuid="${vm_uuid}"
				check_exit \
			 		"$?" \
			 		"Remove disk on position ${dpos} from sr ${sr_uuid}." \
			 		"Remove disk ${dpos} from sr ${sr_uuid}." \
					"fail" \
			 		"${LINENO}"
			done
			
			#RESIZE disks
			log 'msg' 'MSG: start resizing disks if is needed.'
			cat "${TMPFILE003}" | while read l; do
				cur_dev=$(echo $l | awk {'print $1'});
				cur_ds=$(echo $l | awk {'print $2'});

				cur_vbd=$(xe vm-disk-list uuid=${vm_uuid} | 
					grep "userdevice ( RW): ${cur_dev}" -B 2 | 
					grep uuid | 
					head -n1 | 
					awk {'print $5'});
				cur_vdi=$(xe vbd-list uuid="${cur_vbd}" params=vdi-uuid | 
					awk {'print $5'});
				
				xe vdi-resize uuid="${cur_vdi}" disk-size="${cur_ds}" > /dev/null 2>&1
				check_exit \
			 		"$?" \
			 		"Resize disk ${dev} from vdi ${cur_vdi}." \
			 		"Resize disk ${dev} from vdi ${cur_vdi}." \
					"fail" \
			 		"${LINENO}"
				#Resize action
			done

		changed=true
		msg="VM ${vm_name} has been reconfigured."
		printf '{"changed": %s, "msg": "%s"}' "${changed}" "${msg}"
	else
		#No action required, no changes.
		changed=false
		msg="VM ${vm_name} does not require any changes."
		printf '{"changed": %s, "msg": "%s"}' "${changed}" "${msg}"
	fi
}

function main() {
	#Main function to run all the module automation
	initialize_vars
	check_state
	check_exit \
		"$?" \
		"Check&Get parameter 'state'." \
		"Check&Get parameter 'state' ${state}" \
		"fail" \
		"${LINENO}"

	#Include the selected operation.
	#If not exist ERROR
	check_func_state=$(type "${state}" |head -n1 | awk {'print $4'});
	if [[ "${check_func_state}" == "function" ]]; then
		${state}
	else
		log 'exit' 'State is incorrect';
	fi	
}

source "$1"
main
